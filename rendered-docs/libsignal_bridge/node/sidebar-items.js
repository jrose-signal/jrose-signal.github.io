initSidebarItems({"fn":[["js_error_to_rust","Converts a JavaScript error message to a [`SignalProtocolError::ApplicationCallbackError`]."],["register","Exports all `bridge_fn`-generated entry points."],["return_binary_data",""],["return_boxed_object",""],["return_string",""],["with_buffer_contents",""]],"mod":[["convert",""],["error",""],["storage",""]],"struct":[["AssumedImmutableBuffer","A wrapper around `&[u8]` that also stores a checksum, to be validated on Drop."],["DefaultFinalize","A wrapper around a type that implements Neon's [`Finalize`] by simply dropping the type."],["FinalizableOption","A wrapper around `Option` that implements [`neon::prelude::Finalize`]."],["NodeIdentityKeyStore",""],["NodePreKeyStore",""],["NodeSenderKeyStore",""],["NodeSessionStore",""],["NodeSignedPreKeyStore",""],["PersistentAssumedImmutableBuffer","A wrapper around a persisted JavaScript buffer and a pointer/length pair."],["PersistentBoxedValue","Safely persists a boxed Rust value by treating its JavaScript wrapper as a GC root."]],"trait":[["ArgTypeInfo","Converts arguments from their JavaScript form to their Rust form."],["AsyncArgTypeInfo","Converts arguments from their JavaScript form and saves them for use in an `async` function."],["ResultTypeInfo","Converts result values from their Rust form to their JavaScript form."],["SimpleArgTypeInfo","A simpler interface for [`ArgTypeInfo`] and [`AsyncArgTypeInfo`] for when no separate local storage is needed."]],"type":[["DefaultJsBox",""]]});