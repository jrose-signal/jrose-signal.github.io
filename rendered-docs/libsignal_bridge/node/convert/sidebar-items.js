initSidebarItems({"constant":[["MAX_SAFE_JS_INTEGER",""],["NATIVE_HANDLE_PROPERTY","The name of the property on JavaScript objects that wrap a boxed Rust value."]],"fn":[["calculate_checksum_for_immutable_buffer","Calculates a checksum to verify that a buffer wasn't mutated out from under us."],["can_convert_js_number_to_int","Returns `true` if `value` represents an integer within the given range."],["extend_lifetime","Extremely unsafe function to extend the lifetime of a reference."]],"struct":[["AssumedImmutableBuffer","A wrapper around `&[u8]` that also stores a checksum, to be validated on Drop."],["AsyncEnv","A dummy type used to implement [`crate::support::Env`] for `async` `bridge_fn`s."],["FinalizableOption","A wrapper around `Option` that implements [`neon::prelude::Finalize`]."],["PersistentAssumedImmutableBuffer","A wrapper around a persisted JavaScript buffer and a pointer/length pair."],["PersistentBoxedValue","Safely persists a boxed Rust value by treating its JavaScript wrapper as a GC root."]],"trait":[["ArgTypeInfo","Converts arguments from their JavaScript form to their Rust form."],["AsyncArgTypeInfo","Converts arguments from their JavaScript form and saves them for use in an `async` function."],["ResultTypeInfo","Converts result values from their Rust form to their JavaScript form."],["SimpleArgTypeInfo","A simpler interface for [`ArgTypeInfo`] and [`AsyncArgTypeInfo`] for when no separate local storage is needed."]]});