(function() {var implementors = {};
implementors["libsignal_bridge"] = [{"text":"impl Sync for CallbackError","synthetic":true,"types":[]},{"text":"impl !Sync for FfiIdentityKeyStoreStruct","synthetic":true,"types":[]},{"text":"impl !Sync for FfiPreKeyStoreStruct","synthetic":true,"types":[]},{"text":"impl !Sync for FfiSignedPreKeyStoreStruct","synthetic":true,"types":[]},{"text":"impl !Sync for FfiSessionStoreStruct","synthetic":true,"types":[]},{"text":"impl !Sync for FfiSenderKeyStoreStruct","synthetic":true,"types":[]},{"text":"impl !Sync for SignalFfiError","synthetic":true,"types":[]},{"text":"impl Sync for FfiDirection","synthetic":true,"types":[]},{"text":"impl Sync for Env","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for AutoByteSlice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ThrownException","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for JniIdentityKeyStore&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for JniPreKeyStore&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for JniSignedPreKeyStore&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for JniSessionStore&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for JniSenderKeyStore&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for SignalJniError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for FinalizableOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for AssumedImmutableBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for PersistentAssumedImmutableBuffer","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for PersistentBoxedValue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for NodePreKeyStore","synthetic":true,"types":[]},{"text":"impl Sync for NodeSignedPreKeyStore","synthetic":true,"types":[]},{"text":"impl Sync for NodeSessionStore","synthetic":true,"types":[]},{"text":"impl Sync for NodeIdentityKeyStore","synthetic":true,"types":[]},{"text":"impl Sync for NodeSenderKeyStore","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DefaultFinalize&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for AsyncEnv","synthetic":true,"types":[]},{"text":"impl Sync for CallbackError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TransformHelper&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FfiCiphertextMessageType","synthetic":true,"types":[]}];
implementors["libsignal_bridge_macros"] = [{"text":"impl Sync for ResultKind","synthetic":true,"types":[]}];
implementors["signal_neon_futures"] = [{"text":"impl Sync for PersistentException","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for JsFuture&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F, T&gt; Sync for JsFutureBuilder&lt;'a, F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()