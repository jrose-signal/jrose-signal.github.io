(function() {var implementors = {};
implementors["libsignal_bridge"] = [{"text":"impl Freeze for CallbackError","synthetic":true,"types":[]},{"text":"impl Freeze for FfiIdentityKeyStoreStruct","synthetic":true,"types":[]},{"text":"impl Freeze for FfiPreKeyStoreStruct","synthetic":true,"types":[]},{"text":"impl Freeze for FfiSignedPreKeyStoreStruct","synthetic":true,"types":[]},{"text":"impl Freeze for FfiSessionStoreStruct","synthetic":true,"types":[]},{"text":"impl Freeze for FfiSenderKeyStoreStruct","synthetic":true,"types":[]},{"text":"impl Freeze for SignalFfiError","synthetic":true,"types":[]},{"text":"impl Freeze for FfiDirection","synthetic":true,"types":[]},{"text":"impl Freeze for Env","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for AutoByteSlice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ThrownException","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for JniIdentityKeyStore&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for JniPreKeyStore&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for JniSignedPreKeyStore&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for JniSessionStore&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for JniSenderKeyStore&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SignalJniError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FinalizableOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for AssumedImmutableBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PersistentAssumedImmutableBuffer","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PersistentBoxedValue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NodePreKeyStore","synthetic":true,"types":[]},{"text":"impl Freeze for NodeSignedPreKeyStore","synthetic":true,"types":[]},{"text":"impl Freeze for NodeSessionStore","synthetic":true,"types":[]},{"text":"impl Freeze for NodeIdentityKeyStore","synthetic":true,"types":[]},{"text":"impl Freeze for NodeSenderKeyStore","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DefaultFinalize&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AsyncEnv","synthetic":true,"types":[]},{"text":"impl Freeze for CallbackError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TransformHelper&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for FfiCiphertextMessageType","synthetic":true,"types":[]}];
implementors["libsignal_bridge_macros"] = [{"text":"impl Freeze for ResultKind","synthetic":true,"types":[]}];
implementors["signal_neon_futures"] = [{"text":"impl Freeze for PersistentException","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for JsFuture&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F, T&gt; Freeze for JsFutureBuilder&lt;'a, F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()