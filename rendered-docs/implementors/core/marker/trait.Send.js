(function() {var implementors = {};
implementors["libsignal_bridge"] = [{"text":"impl Send for CallbackError","synthetic":true,"types":[]},{"text":"impl !Send for FfiIdentityKeyStoreStruct","synthetic":true,"types":[]},{"text":"impl !Send for FfiPreKeyStoreStruct","synthetic":true,"types":[]},{"text":"impl !Send for FfiSignedPreKeyStoreStruct","synthetic":true,"types":[]},{"text":"impl !Send for FfiSessionStoreStruct","synthetic":true,"types":[]},{"text":"impl !Send for FfiSenderKeyStoreStruct","synthetic":true,"types":[]},{"text":"impl Send for SignalFfiError","synthetic":true,"types":[]},{"text":"impl Send for FfiDirection","synthetic":true,"types":[]},{"text":"impl Send for Env","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for AutoByteSlice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ThrownException","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for JniIdentityKeyStore&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for JniPreKeyStore&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for JniSignedPreKeyStore&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for JniSessionStore&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for JniSenderKeyStore&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SignalJniError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FinalizableOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for AssumedImmutableBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for NodePreKeyStore","synthetic":true,"types":[]},{"text":"impl Send for NodeSignedPreKeyStore","synthetic":true,"types":[]},{"text":"impl Send for NodeSessionStore","synthetic":true,"types":[]},{"text":"impl Send for NodeIdentityKeyStore","synthetic":true,"types":[]},{"text":"impl Send for NodeSenderKeyStore","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DefaultFinalize&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AsyncEnv","synthetic":true,"types":[]},{"text":"impl Send for CallbackError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TransformHelper&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FfiCiphertextMessageType","synthetic":true,"types":[]},{"text":"impl Send for PersistentAssumedImmutableBuffer","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send + Sync + 'static&gt; Send for PersistentBoxedValue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["libsignal_bridge_macros"] = [{"text":"impl Send for ResultKind","synthetic":true,"types":[]}];
implementors["signal_neon_futures"] = [{"text":"impl Send for PersistentException","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for JsFuture&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F, T&gt; Send for JsFutureBuilder&lt;'a, F, T&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()