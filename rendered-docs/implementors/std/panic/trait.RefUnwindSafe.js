(function() {var implementors = {};
implementors["libsignal_bridge"] = [{"text":"impl RefUnwindSafe for CallbackError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FfiIdentityKeyStoreStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FfiPreKeyStoreStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FfiSignedPreKeyStoreStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FfiSessionStoreStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FfiSenderKeyStoreStruct","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SignalFfiError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FfiDirection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Env","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for AutoByteSlice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThrownException","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for JniIdentityKeyStore&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for JniPreKeyStore&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for JniSignedPreKeyStore&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for JniSessionStore&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for JniSenderKeyStore&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SignalJniError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for FinalizableOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for AssumedImmutableBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PersistentAssumedImmutableBuffer","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PersistentBoxedValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodePreKeyStore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeSignedPreKeyStore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeSessionStore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeIdentityKeyStore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeSenderKeyStore","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DefaultFinalize&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AsyncEnv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CallbackError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TransformHelper&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FfiCiphertextMessageType","synthetic":true,"types":[]}];
implementors["libsignal_bridge_macros"] = [{"text":"impl RefUnwindSafe for ResultKind","synthetic":true,"types":[]}];
implementors["signal_neon_futures"] = [{"text":"impl RefUnwindSafe for PersistentException","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for JsFuture&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F, T&gt; RefUnwindSafe for JsFutureBuilder&lt;'a, F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()